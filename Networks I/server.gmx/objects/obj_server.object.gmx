<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>intro</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()
server = network_create_server(network_socket_tcp, 6510, 2)
buff = buffer_create(16384, buffer_fixed, 1);

clients_sockets = ds_list_create() //this will store all players sockets, add it only in the server, it will be used for list index search
clients_name = ds_list_create() //this will store all players names
clients_x = ds_list_create() //this will store all players x pos
clients_y = ds_list_create() //this will store all players y pos

turn = 0;
game_started = false;

for (var i = 0; i &lt; 5; i++;)
{
    alive0[i] = i + 1;
    alive1[i] = i + 1;    
}

boat[0] = 0;
boat[1] = 0;

boats[0,0] = submarino;
boats[0,1] = rebocador;
boats[0,2] = contra_torpedeiro;
boats[0,3] = cruzador;
boats[0,4] = porta_avioes;
boats[1,0] = 1;
boats[1,1] = 2;
boats[1,2] = 3;
boats[1,3] = 4;
boats[1,4] = 5;
boats[2,0] = "S";
boats[2,1] = "R";
boats[2,2] = "T";
boats[2,3] = "C";
boats[2,4] = "P";

for (var i = 0; i &lt; 10; i++;)
    for (var j = 0; j &lt; 10; j++;)
    {
        board0[i,j] = "E";
        board1[i,j] = "E";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>count = ds_list_size(clients_sockets)

if count&gt;0
{
    buffer_seek(buff, buffer_seek_start, 0)
    buffer_write(buff, buffer_string, "all_clients")
    buffer_write(buff, buffer_s16, count)

    for(i=0;i&lt;count;i++)
    {
        b_name=ds_list_find_value(clients_name,i)
        b_x=ds_list_find_value(clients_x,i)
        b_y=ds_list_find_value(clients_y,i)
        buffer_write(buff, buffer_string, string(b_name) )//clients_name
        buffer_write(buff, buffer_s16, b_x)//clients_x
        buffer_write(buff, buffer_s16, b_y )//clients_y
    }

    var buffer_size = buffer_tell(buff);
        
    // Now send all data... to all clients
    for(i=0;i&lt;count;i++)
    {   
        sock = ds_list_find_value(clients_sockets,i);
        network_send_packet( sock, buff, buffer_size );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eventid = ds_map_find_value(async_load, "id")

if server = eventid 
{
    //disconnect of a client
    t = ds_map_find_value(async_load, "type");
    sock = ds_map_find_value(async_load, "socket");
    
    if( t!= network_type_connect)
    {
        index = ds_list_find_index( clients_sockets, sock)
        //show_message(ds_list_find_value(clients_name, index)+" disconected")
        ds_list_delete(clients_sockets,index)
        ds_list_delete(clients_name, index)//name
        ds_list_delete(clients_x, index )//x
        ds_list_delete(clients_y, index )//y
    }
}
else
{
    net_buff = ds_map_find_value(async_load, "buffer")
    buff_info = buffer_read(net_buff , buffer_string ) 
    sock = ds_map_find_value(async_load, "id")
    
    if buff_info="client_status"//client stats
    {
        index=ds_list_find_index( clients_sockets, sock)

        var inc
        if (game_started)
        {
            if (index == 0)
                inc = 13 * 32
            else
                inc = 32                
        }
        else
        {
            if (index == 0)
                inc = 32
            else
                inc = 32 * 13
        }
        
        b_x = buffer_read(net_buff , buffer_s16 )
        b_y = buffer_read(net_buff , buffer_s16 ) + inc
        ds_list_replace(clients_x, index, b_x)
        ds_list_replace(clients_y, index, b_y)
    }
    
    else if buff_info="check_name"//check if name exists
    {
        b_name=buffer_read(net_buff , buffer_string )
        count=ds_list_size(clients_name)
        name_exists=0
        for(i=0;i&lt;count;i++)
            if b_name=ds_list_find_value(clients_name, i) name_exists=1
        
        buffer_seek(buff, buffer_seek_start, 0)   
        buffer_write(buff, buffer_string, "name_exists")
        buffer_write(buff, buffer_bool, name_exists)
        var buffer_size = buffer_tell(buff);
        network_send_packet( sock, buff, buffer_size );
    }
        
        
    else if buff_info="client_setup"//client setup
    {
        b_name=buffer_read(net_buff , buffer_string )
        b_x=buffer_read(net_buff , buffer_u8 )
        b_y=buffer_read(net_buff , buffer_u8 )
        
        ds_list_add(clients_sockets,sock)
        ds_list_add(clients_name,b_name)
        ds_list_add(clients_x,b_x)
        ds_list_add(clients_y,b_y)
        //show_message(b_name+" joined at pos x:"+string(b_x)+" y:"+string(b_y))
        //show_message("list sizes, socket="+string(ds_list_size(clients_sockets))+" name="+string(ds_list_size(clients_name))+" x="+string(ds_list_size(clients_x))+" y="+string(ds_list_size(clients_y)))
    }        
    
    else if buff_info="client_deploy" // client deploy of a ship
    {
        b_name=buffer_read(net_buff , buffer_string )
    
        var c_id = ds_list_find_index(clients_name,b_name);

        var inc
        if (c_id == 0)
            inc = 2
        else
            inc = 14
        
        if (boat[c_id] &lt; 5)
        {           
            b_x= buffer_read(net_buff , buffer_u8 ) - 1
            b_y= buffer_read(net_buff , buffer_u8 ) - 1
                
            var board;      
            
            if (c_id == 0)
                board = board0;
            else
                board = board1;
              
            var m = (boat[c_id]+1) mod 2;
            var flag = true;
            
            if ((m == 0) and (b_x + boats[1,boat[c_id]] &lt; 10))
            {
                for (var i = b_x; i &lt; b_x + boats[1,boat[c_id]]; i++;)
                    if (board[b_y,i] != "E")
                        flag = false;
                
                if (flag)
                {
                    instance_create((b_x + 1) * 32, (b_y + inc) * 32, boats[0,boat[c_id]]);
                    for (var j = b_x; j &lt; b_x + boats[1,boat[c_id]]; j++;)
                        board[b_y,j] = boats[2,boat[c_id]];
                    boat[c_id]++;
                }
            }
            else if ((m == 1) and (b_y + boats[1,boat[c_id]] &lt; 10))
            {
                for (var i = b_y; i &lt; b_y+boats[1,boat[c_id]]; i++;)
                if (board[i,b_x] != "E")
                        flag = false;
                
                if (flag)
                {
                    instance_create((b_x + 1) * 32, (b_y + inc) * 32, boats[0,boat[c_id]]);
                    for (var j = b_y; j &lt; b_y + boats[1,boat[c_id]]; j++;)
                        board[j,b_x] = boats[2,boat[c_id]];
                    boat[c_id]++;
                }
            }
            else
                flag = false;
            
            if flag
            {
                if (c_id == 0)
                    board0 = board;
                else
                    board1 = board;
            }
            
            buffer_seek(buff, buffer_seek_start, 0)
            buffer_write(buff, buffer_string, "deploy_reply")
            buffer_write(buff, buffer_bool, flag);
            buffer_write(buff, buffer_u8, boat[c_id]);
                
            var buffer_size = buffer_tell(buff);
            network_send_packet( sock, buff, buffer_size );
            
            if ((boat[0] == 5) and (boat[1] == 5))
            {
                buffer_seek(buff, buffer_seek_start, 0)
                buffer_write(buff, buffer_string, "start_game")
                var buffer_size = buffer_tell(buff);
                            
                for(i=0;i&lt;count;i++)
                {   
                    sock = ds_list_find_value(clients_sockets,i);
                    network_send_packet( sock, buff, buffer_size );
                }
                
                game_started = true;
            }
        }
    } 
    else if buff_info="client_attack"
    {
        b_name=buffer_read(net_buff , buffer_string )
        var c_id = ds_list_find_index(clients_name,b_name)
        
        var inc
        if (c_id == 0)
            inc = 14
        else
            inc = 2
        
        if (turn == c_id)
        {
            b_x= buffer_read(net_buff , buffer_u8 ) - 1
            b_y= buffer_read(net_buff , buffer_u8 ) - 1
            
          //  show_message("x: " + string(b_x) + " y: " + string(b_y))
            
            var board  
            var alive
            if (c_id == 0)
            {
                board = board1
                alive = alive1
            }
            else
            {
                board = board0
                alive = alive0
            }

            buffer_seek(buff, buffer_seek_start, 0)
            buffer_write(buff, buffer_string, "attack_reply")
            
            if (board[b_y,b_x] != "E")
            {
                
                for (var i = 0; i &lt; 5; i++;)
                    if (boats[2,i] == board[b_y,b_x])
                        alive[i]--;
                
                buffer_write(buff, buffer_bool, true);
                buffer_write(buff, buffer_string, board[b_y,b_x]);
                
                board[b_y,b_x] = "H"                
            }
            else
            {
                board[b_y,b_x] = "W"
                buffer_write(buff, buffer_bool, false);
                buffer_write(buff, buffer_string, board[b_y,b_x]);
            }
              
            var buffer_size = buffer_tell(buff);
            network_send_packet( sock, buff, buffer_size );
            
            flag = true;
            
            for (var i = 0; i &lt; 5; i++;)
                if (alive[i] != 0)
                    flag = false;
            
            if (c_id == 0)
            {
                board1 = board
                alive1 = alive
            }
            else
            {
                board0 = board
                alive0 = alive
            }                    
                            
            if (flag)
            {
                buffer_seek(buff, buffer_seek_start, 0)
                buffer_write(buff, buffer_string, "end_game")
                buffer_write(buff, buffer_string, b_name);
                
                var buffer_size = buffer_tell(buff);
                
                for(i=0;i&lt;count;i++)
                {   
                    sock = ds_list_find_value(clients_sockets,i);
                    network_send_packet( sock, buff, buffer_size );
                }
                
                turn = -1;
            }
            else
                turn = (turn+1) mod 2
        }
        else
        {
            buffer_seek(buff, buffer_seek_start, 0)
            buffer_write(buff, buffer_string, "wrong_turn")
            var buffer_size = buffer_tell(buff);
            network_send_packet( sock, buff, buffer_size );
        }
    }
    else show_message(buff_info)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>count = ds_list_size(clients_sockets)

if count &gt; 0
{
    for(i=0; i &lt; count;i++)
    {
        name=ds_list_find_value(clients_name,i)//name
        draw_set_font(500)
//        if (game_started == false)
            draw_text(128,0 + (i * 384),name)
  //      else
    //        draw_text(128,(1-i) * 384,name)
            
        xx=ds_list_find_value(clients_x,i)//x
        yy=ds_list_find_value(clients_y,i)//y
        draw_circle(xx,yy,5,false)
        draw_set_font(-1)
        draw_text(xx,yy,name)
    }
    
    if (game_started)
    {
        for (var i = 0; i &lt; 10; i++;)
            for (var j = 0; j &lt; 10; j++;)
            {
                var temp_x = i + 1
                var temp_y = j + 14
                
                if (board1[j,i] == "H")
                    draw_sprite(morte1,0,temp_x * 32,temp_y * 32)                    
                else if (board1[j,i] == "W")
                    draw_sprite(tiro_agua,0,temp_x * 32 ,temp_y * 32)                

                temp_y = j + 2
                    
                if (board0[j,i] == "H")
                    draw_sprite(morte1,0,temp_x * 32,temp_y * 32)                   
                else if (board0[j,i] == "W")
                    draw_sprite(tiro_agua,0,temp_x * 32 ,temp_y * 32)                    
            }
    }
}
else
{
    draw_set_font(500)
    draw_text(64,384,"Nenhum Jogador Presente");
    draw_text(64,0,"Nenhum Jogador Presente");
    draw_set_font(-1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
